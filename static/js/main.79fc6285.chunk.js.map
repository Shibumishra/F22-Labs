{"version":3,"sources":["Login.js","App.js","reportWebVitals.js","index.js"],"names":["SignIn","handleChange","btnStyle","margin","validateYupSchema","Yup","shape","username","email","required","password","remember","oneOf","Grid","Paper","style","padding","height","width","align","Avatar","backgroundColor","LockOpenOutlined","initialValues","onSubmit","values","props","console","log","setTimeout","resetForm","setSubmitting","validationSchema","as","TextField","label","name","placeholder","type","fullWidth","helperText","FormControlLabel","control","Checkbox","color","FormHelperText","Button","variant","disabled","isSubmitting","Typography","textDecoration","href","App","className","Login","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wTAqFeA,EA3EA,SAAC,GAAmB,EAAlBC,aAAmB,IAI1BC,EAAW,CAAEC,OAAQ,SAMrBC,EAAoBC,MAAaC,MAAM,CACzCC,SAAUF,MAAaG,MAAM,4BAA4BC,SAAS,YAClEC,SAAUL,MAAaI,SAAS,YAChCE,SAAUN,MAAaO,MAAM,CAAC,QAAS,qBAU3C,OAAQ,mCAEJ,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,CAAOC,MAxBI,CAAEC,QAAS,GAAIC,OAAQ,OAAQC,MAAO,IAAKf,OAAQ,aAwB9D,UACI,eAACU,EAAA,EAAD,CAAMM,MAAM,SAAZ,UACI,cAACC,EAAA,EAAD,CAAQL,MAzBJ,CAAEM,gBAAiB,WAyBvB,SAA4B,cAACC,EAAA,EAAD,MAC5B,4CAEJ,cAAC,IAAD,CAAQC,cA1BE,CAClBhB,SAAU,GACVG,SAAU,GACVC,UAAU,GAuBoCa,SAhBjC,SAACC,EAAQC,GACtBC,QAAQC,IAAIH,GACZI,YAAW,WACPH,EAAMI,YACNJ,EAAMK,eAAc,KACrB,MAW+DC,iBAAkB5B,EAA5E,SACK,SAACsB,GAAD,OACG,eAAC,IAAD,WACI,cAAC,IAAD,CAAOO,GAAIC,IAAWC,MAAM,QAAQC,KAAK,QACrCC,YAAY,QAAQC,KAAK,OAAOC,WAAS,EAAC9B,UAAQ,EAClD+B,WAAY,cAAC,IAAD,CAAcJ,KAAK,eAEnC,cAAC,IAAD,CAAOH,GAAIC,IAAWC,MAAM,WAAWC,KAAK,WACxCC,YAAY,iBAAiBC,KAAK,WAAWC,WAAS,EAAC9B,UAAQ,EAC/D+B,WAAY,cAAC,IAAD,CAAcJ,KAAK,eAEnC,cAAC,IAAD,CAAOH,GAAIQ,IACPL,KAAK,WACLM,QACI,cAACC,EAAA,EAAD,CACIC,MAAM,YAGdT,MAAM,gBAEV,cAACU,EAAA,EAAD,UAAgB,cAAC,IAAD,CAAcT,KAAK,eACnC,cAACU,EAAA,EAAD,CACIR,KAAK,UACLM,MAAM,UACNG,QAAQ,YACRhC,MAAOb,EACPqC,WAAS,EACTS,SAAUtB,EAAMuB,aANpB,SAOEvB,EAAMuB,aAAe,UAAY,kBAI/C,cAACC,EAAA,EAAD,UACI,mBAAGnC,MAAO,CAAEoC,eAAgB,QAAUC,KAAK,IAA3C,kCAEJ,eAACF,EAAA,EAAD,uCACI,mBAAGnC,MAAO,CAAEoC,eAAgB,QAAUC,KAAK,IAA3C,gCCjELC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACG,cAACC,EAAD,OCKQC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.79fc6285.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Grid, Paper, Avatar, Button, Typography } from '@material-ui/core';\r\nimport { LockOpenOutlined } from '@material-ui/icons';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { FormHelperText } from '@material-ui/core';\r\n\r\nconst SignIn = ({handleChange}) => {\r\n    \r\n    const paperStyle = { padding: 20, height: \"73vh\", width: 300, margin: \"30px auto\" }\r\n    const avatarStyle = { backgroundColor: \"#1bbd7e\" }\r\n    const btnStyle = { margin: '8px 0' }\r\n    const initialValues = {\r\n        username: '',\r\n        password: '',\r\n        remember: false\r\n    }\r\n    const validateYupSchema = Yup.object().shape({\r\n        username: Yup.string().email('please enter valid email').required(\"Required\"),\r\n        password: Yup.string().required(\"Required\"),\r\n        remember: Yup.string().oneOf([\"true\"], \"Accept remember\")\r\n    })\r\n    const onSubmit = (values, props) => {\r\n        console.log(values)\r\n        setTimeout(() => {\r\n            props.resetForm()\r\n            props.setSubmitting(false)\r\n        }, 2000)\r\n    }\r\n\r\n    return (<>\r\n        \r\n        <Grid>\r\n            <Paper style={paperStyle}>\r\n                <Grid align='center'>\r\n                    <Avatar style={avatarStyle}><LockOpenOutlined /></Avatar>\r\n                    <h2>Sign In</h2>\r\n                </Grid>\r\n                <Formik initialValues={initialValues} onSubmit={onSubmit} validationSchema={validateYupSchema}>\r\n                    {(props) => (\r\n                        <Form>\r\n                            <Field as={TextField} label='Emali' name=\"email\"\r\n                                placeholder='Email' type='text' fullWidth required\r\n                                helperText={<ErrorMessage name=\"username\" />}\r\n                            />\r\n                            <Field as={TextField} label='Paddword' name=\"password\"\r\n                                placeholder='Enter Password' type='password' fullWidth required\r\n                                helperText={<ErrorMessage name=\"password\" />}\r\n                            />\r\n                            <Field as={FormControlLabel}\r\n                                name='remember'\r\n                                control={\r\n                                    <Checkbox\r\n                                        color=\"primary\"\r\n                                    />\r\n                                }\r\n                                label=\"Remember me\"\r\n                            />\r\n                            <FormHelperText><ErrorMessage name=\"remember\" /></FormHelperText>\r\n                            <Button\r\n                                type=\"'submit\"\r\n                                color=\"primary\"\r\n                                variant=\"contained\"\r\n                                style={btnStyle}\r\n                                fullWidth\r\n                                disabled={props.isSubmitting}\r\n                            >{props.isSubmitting ? \"Loading\" : \"Sign In\"}</Button>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <Typography>\r\n                    <a style={{ textDecoration: \"none\" }} href=\"#\">Forogot Password ?</a>\r\n                </Typography>\r\n                <Typography> Do you have an account ?\r\n                    <a style={{ textDecoration: \"none\" }} href=\"#\">Sign Up</a>\r\n                </Typography>\r\n            </Paper>\r\n        </Grid>\r\n    </>\r\n    );\r\n}\r\n\r\nexport default SignIn;","import React from 'react';\nimport './App.css';\nimport Login from './Login';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n       <Login />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}